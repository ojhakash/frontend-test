{"version":3,"sources":["components/loanCalculatorComponent/loanCalculatorComponent.js","components/computedEmiComponent/computedEmiComponent.js","components/shared/loader/loader.js","containers/MainContainer/MainContainer.js","App.js","serviceWorker.js","index.js"],"names":["monthDurationArr","i","push","loanCalculatorComponent","props","react_default","a","createElement","Form","FormGroup","Label","for","style","paddingBottom","padding","js_default","maxValue","minValue","value","loanAmount","onChange","onLoanAmoutChange","FormText","marginTop","Input","type","monthDuration","name","id","e","onMonthDurationChange","target","map","month","key","Button","width","onClick","onLoanCalculatorSubmit","computedEmi","Card","body","inverse","backgroundColor","borderColor","margin","CardTitle","principal","amount","currency","interestRate","monthlyPayment","loader","className","MainContainer","state","showComputedCard","this","setState","_this2","url","URL","search","URLSearchParams","numMonths","fetch","method","then","response","json","data","status","apiError","message","setTimeout","Object","objectSpread","_this3","paddingTop","Breadcrumb","BreadcrumbItem","active","components_loanCalculatorComponent_loanCalculatorComponent","monthDurationChangeHandler","loanAmountChangeHandler","submitClicked","shared_loader_loader","computedEmiComponent","Alert","color","Component","App","containers_MainContainer_MainContainer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.472aa4c2.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Button, FormGroup, Form, Label, FormText, Input } from \"reactstrap\";\r\nimport InputRange from \"react-input-range\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n//this array is to initialize 6 to 24 numbers which is used in dropdown\r\nconst monthDurationArr = [];\r\nfor (let i = 6; i <= 24; i++) {\r\n    monthDurationArr.push(i);\r\n}\r\n\r\nconst loanCalculatorComponent = props => (\r\n    <Form>\r\n        <FormGroup />\r\n        <FormGroup>\r\n            <Label for=\"loanAmount\" style={{ paddingBottom: \"0.5em\" }}>\r\n                Amount in $\r\n            </Label>\r\n            <div style={{ padding: \"0 1em\" }}>\r\n                <InputRange\r\n                    maxValue={5000}\r\n                    minValue={500}\r\n                    value={props.loanAmount}\r\n                    onChange={value => props.onLoanAmoutChange(value)}\r\n                />\r\n            </div>\r\n\r\n            <FormText style={{ marginTop: \"2em\" }}>\r\n                The loan amount between $500 and $5000\r\n            </FormText>\r\n        </FormGroup>\r\n        <FormGroup>\r\n            <Label for=\"monthDuration\">Duration in months</Label>\r\n            <Input\r\n                type=\"select\"\r\n                value={props.monthDuration}\r\n                name=\"select\"\r\n                id=\"exampleSelect\"\r\n                onChange={e => {\r\n                    props.onMonthDurationChange(e.target.value);\r\n                }}\r\n            >\r\n                {monthDurationArr.map(month => (\r\n                    <option key={month}>{month}</option>\r\n                ))}\r\n            </Input>\r\n            <FormText>\r\n                Time Duration between 6 months and 24 months in which user would\r\n                pay his loan\r\n            </FormText>\r\n        </FormGroup>\r\n        <FormGroup>\r\n            <Button\r\n                style={{ width: \"-webkit-fill-available\" }}\r\n                onClick={e => {\r\n                    props.onLoanCalculatorSubmit(e);\r\n                }}\r\n            >\r\n                Submit\r\n            </Button>\r\n        </FormGroup>\r\n    </Form>\r\n);\r\n\r\nloanCalculatorComponent.propTypes = {\r\n    monthDuration: PropTypes.number.isRequired,\r\n    loanAmount: PropTypes.number.isRequired,\r\n    onMonthDurationChange: PropTypes.func.isRequired,\r\n    onLoanAmoutChange: PropTypes.func.isRequired,\r\n    onLoanCalculatorSubmit: PropTypes.func.isRequired\r\n};\r\n\r\nexport default loanCalculatorComponent;\r\n","import React from \"react\";\r\nimport { Card, CardTitle } from \"reactstrap\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst computedEmi = props => {\r\n    return (\r\n        <Card\r\n            body\r\n            inverse\r\n            style={{\r\n                backgroundColor: \"#333\",\r\n                borderColor: \"#333\",\r\n                width: \"50%\",\r\n                margin: \"auto\"\r\n            }}\r\n        >\r\n            <CardTitle>\r\n                <b>Computed EMI Details</b>\r\n            </CardTitle>\r\n            <div>\r\n                <div>\r\n                    {\" \"}\r\n                    Total Capital:{\" \"}\r\n                    <b>\r\n                        {props.principal.amount} {props.principal.currency}\r\n                    </b>\r\n                </div>\r\n                <div>\r\n                    Rate of Interest: <b>{props.interestRate}</b>\r\n                </div>\r\n                <div>\r\n                    Total month take to repay the Loan:{\" \"}\r\n                    <b>{props.monthDuration}</b>\r\n                </div>\r\n                <div>\r\n                    {\" \"}\r\n                    Monthly Payment:{\" \"}\r\n                    <b>\r\n                        {props.monthlyPayment.amount}{\" \"}\r\n                        {props.monthlyPayment.currency}\r\n                    </b>\r\n                </div>\r\n            </div>\r\n        </Card>\r\n    );\r\n};\r\n\r\ncomputedEmi.propTypes = {\r\n    principal: PropTypes.shape({\r\n        amount: PropTypes.number.isRequired,\r\n        currency: PropTypes.string.isRequired\r\n    }).isRequired,\r\n    monthlyPayment: PropTypes.shape({\r\n        amount: PropTypes.number.isRequired,\r\n        currency: PropTypes.string.isRequired\r\n    }),\r\n    interestRate: PropTypes.number.isRequired,\r\n    monthDuration: PropTypes.number.isRequired\r\n};\r\n\r\nexport default computedEmi;\r\n","import React from \"react\";\r\nimport \"./loader.css\";\r\n\r\nconst loader = props => (\r\n    <div className=\"lds-roller\">\r\n        <div />\r\n        <div />\r\n        <div />\r\n        <div />\r\n        <div />\r\n        <div />\r\n        <div />\r\n        <div />\r\n    </div>\r\n);\r\n\r\nexport default loader;\r\n","import React, { Component } from \"react\";\r\nimport { Breadcrumb, BreadcrumbItem, Alert } from \"reactstrap\";\r\nimport LoanCalculator from \"./../../components/loanCalculatorComponent/loanCalculatorComponent\";\r\nimport ComputedEmi from \"./../../components/computedEmiComponent/computedEmiComponent\";\r\nimport Loader from \"./../../components/shared/loader/loader\";\r\n\r\nclass MainContainer extends Component {\r\n    // state are initalized here\r\n    state = {\r\n        loanAmount: 500,\r\n        monthDuration: 6,\r\n        showComputedCard: false,\r\n        loader: false,\r\n        interestRate: 0,\r\n        monthlyPayment: {\r\n            amount: 0,\r\n            currency: \"\"\r\n        },\r\n        principal: {\r\n            amount: 0,\r\n            currency: \"\"\r\n        }\r\n    };\r\n\r\n    loanAmountChangeHandler(value) {\r\n        this.setState({ loanAmount: value });\r\n    }\r\n\r\n    monthDurationChangeHandler(value) {\r\n        this.setState({ monthDuration: value });\r\n    }\r\n\r\n    submitClicked(e) {\r\n        // console.log(this.state);\r\n        //set the computed card to invisible\r\n        this.setState({ showComputedCard: false, loader: true });\r\n        let url = new URL(\"https://ftl-frontend-test.herokuapp.com/interest\");\r\n        url.search = new URLSearchParams({\r\n            amount: this.state.loanAmount,\r\n            numMonths: this.state.monthDuration\r\n        });\r\n        fetch(url, {\r\n            method: \"get\"\r\n        })\r\n            .then(response => {\r\n                return response.json();\r\n            })\r\n            .then(data => {\r\n                // change all states according to the fetched data from the api\r\n                if (data.status === \"error\") {\r\n                    //if error come then a alert will show\r\n                    this.setState({\r\n                        loader: false,\r\n                        apiError:\r\n                            data.message || \"error from api.Please try again!\"\r\n                    });\r\n                    setTimeout(() => {\r\n                        this.setState({ apiError: null });\r\n                    }, 2000);\r\n                } else {\r\n                    //if everything is right the the proper data will show\r\n                    this.setState({ ...data }, () => {\r\n                        //set the computed card to visible\r\n                        this.setState({\r\n                            showComputedCard: true,\r\n                            loader: false\r\n                        });\r\n                    });\r\n                }\r\n            });\r\n    }\r\n    render() {\r\n        return (\r\n            <div style={{ width: \"60%\", margin: \"auto\", paddingTop: \"2em\" }}>\r\n                <Breadcrumb>\r\n                    <BreadcrumbItem active>\r\n                        Loan EMI and Interest calculator\r\n                    </BreadcrumbItem>\r\n                </Breadcrumb>\r\n                <LoanCalculator\r\n                    monthDuration={this.state.monthDuration}\r\n                    onMonthDurationChange={value => {\r\n                        this.monthDurationChangeHandler(value);\r\n                    }}\r\n                    loanAmount={this.state.loanAmount}\r\n                    onLoanAmoutChange={value => {\r\n                        this.loanAmountChangeHandler(value);\r\n                    }}\r\n                    onLoanCalculatorSubmit={e => this.submitClicked(e)}\r\n                />\r\n                {/* it will show between api request is stared and finished */}\r\n                {this.state.loader && (\r\n                    <div style={{ width: \"3em\", margin: \"auto\" }}>\r\n                        <Loader />\r\n                    </div>\r\n                )}\r\n                {/* it will show after the request come without any error */}\r\n                {this.state.showComputedCard && (\r\n                    <ComputedEmi\r\n                        principal={this.state.principal}\r\n                        monthlyPayment={this.state.monthlyPayment}\r\n                        interestRate={this.state.interestRate}\r\n                        monthDuration={this.state.monthDuration}\r\n                    />\r\n                )}\r\n                {/* it will show if any error occurred in fetching data */}\r\n                {this.state.apiError && (\r\n                    <Alert color=\"primary\">{this.state.apiError}</Alert>\r\n                )}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MainContainer;\r\n","import React, { Component } from \"react\";\nimport MainContainer from \"./containers/MainContainer/MainContainer\";\n\nclass App extends Component {\n    render() {\n        return <MainContainer />;\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"react-input-range/lib/css/index.css\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}